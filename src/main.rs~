use pelican_ui::*;
use runtime::{self, Service, ServiceList, ThreadContext, async_trait, Services};

use pelican_ui::drawable::Component;

use pelican_ui::events::{Event};
use pelican_ui::drawable::{Shape, Color, Drawable, ShapeType};

use std::collections::BTreeMap;
use serde::{Serialize, Deserialize};
use std::time::Duration;

pub struct TestApp;
impl Plugins for TestApp {
    fn plugins(ctx: &mut Context) -> Vec<Box<dyn Plugin>> {vec![]}
}
impl Services for TestApp {}
start!(TestApp);
fn main() {
    maverick_main();
}


impl Application for TestApp {
    async fn new(_context: &mut Context) -> Box<dyn Drawable> {
        Box::new(Shape{
            shape: ShapeType::Ellipse(0.0, (400.0, 400.0)),
            color: Color(0, 0, 255, 255)
        })
    }
}
